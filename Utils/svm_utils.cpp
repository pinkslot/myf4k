#include "svm_utils.h"
#include <my_exception.h>
#include <log.h>
#include <cstdio>
#include <cstring>

using namespace std;

void SVMUtils::load(string file_path)
{
	// Load model
	svm = svm_load_model(file_path.c_str());
	// Check success
	if(svm == NULL)
	{
		throw MyException("Error loading the SVM model file");
	}
}

void SVMUtils::loadBuiltIn()
{
	// Create string
	char model_str[] = 
"svm_type c_svc\n"
"kernel_type rbf\n"
"gamma 0.03125\n"
"nr_class 2\n"
"total_sv 107\n"
"rho -1.69272\n"
"label 1 -1\n"
"probA -1.50151\n"
"probB 0.0887779\n"
"nr_sv 55 52\n"
"SV\n"
"32768 1:0.118695 2:0.396233 3:0 4:0.823667 \n"
"32768 1:0.066634 2:0.061089 3:0.720339 4:0.331348 \n"
"32768 1:0.1044 2:0.122958 3:0 4:0.175797 \n"
"32768 1:0.139125 2:0.118004 3:0.071365 4:0.554659 \n"
"32768 1:0.065721 2:0.143741 3:0 4:0.554997 \n"
"32768 1:0.080252 2:0.073645 3:0.615726 4:0.463255 \n"
"32768 1:0.036782 2:0.248093 3:0.447719 4:0.40997 \n"
"32768 1:0.115123 2:0.161306 3:0.556474 4:0.224416 \n"
"32768 1:0.278722 2:0.037188 3:0.057285 4:0.118947 \n"
"32768 1:0.036572 2:0.059422 3:0.900012 4:0.168918 \n"
"32768 1:0.063778 2:0.101845 3:-0 4:0.454256 \n"
"32768 1:0.069466 2:0.028494 3:0.318606 4:0.759246 \n"
"32768 1:0.170416 2:0.233809 3:0 4:0.568477 \n"
"32768 1:0.029281 2:0.075996 3:0.111789 4:0.686511 \n"
"32768 1:0.03426 2:0.145003 3:0.268763 4:0.605461 \n"
"32768 1:0 2:0.003731 3:0.639896 4:0.408329 \n"
"32768 1:0.049923 2:0.252829 3:0.389069 4:0.349025 \n"
"32768 1:0.053274 2:0.122166 3:0.679057 4:0.371113 \n"
"32768 1:0 2:0.056999 3:0.285421 4:0.435068 \n"
"5070.246363786864 1:0.255373 2:0 3:0.755991 4:0.338578 \n"
"32768 1:0.226941 2:0 3:0.589595 4:0.425182 \n"
"32768 1:0.419343 2:0.324074 3:0.181564 4:0.518293 \n"
"32768 1:0.467134 2:0.2 3:0 4:0.53118 \n"
"32768 1:0.01908 2:0.377166 3:0.008519 4:0.241377 \n"
"18450.18186678956 1:0.078767 2:0.36132 3:0.602371 4:0.25768 \n"
"32768 1:0.035357 2:0.296752 3:0.628111 4:0.277552 \n"
"1468.354652781753 1:0 2:0.455813 3:0.239488 4:0.250145 \n"
"32768 1:0.061322 2:0.110403 3:0.359155 4:0.316603 \n"
"3119.781418539166 1:0.043743 2:0.007961 3:0.676008 4:0.977698 \n"
"32768 1:0.037804 2:0.170589 3:0.292386 4:0.479434 \n"
"32768 1:0.225829 2:0.282342 3:0 4:0.333113 \n"
"32768 1:0.02411 2:0.246352 3:0.578483 4:0.244639 \n"
"12595.96510371718 1:0.154906 2:0.232153 3:0.43346 4:0.522535 \n"
"32768 1:0.044056 2:0.07275 3:0.707151 4:0.195888 \n"
"32768 1:0 2:0.190633 3:0.328767 4:0.325361 \n"
"32768 1:0.054769 2:0.178094 3:0 4:0.697677 \n"
"15643.83393379477 1:0.061483 2:0.233929 3:0.21337 4:0.620544 \n"
"32768 1:0 2:1e-05 3:0 4:0.826087 \n"
"32768 1:0.488256 2:0.225117 3:0 4:0.838462 \n"
"32768 1:0.04978 2:0.075211 3:0.796544 4:0.155746 \n"
"32768 1:0.052544 2:0.060189 3:0.682965 4:0.383592 \n"
"32768 1:0.061891 2:0.386183 3:0.562416 4:0.141597 \n"
"32768 1:0.122411 2:0.28972 3:0.42069 4:0.925861 \n"
"32768 1:0.149825 2:0.018828 3:0.26898 4:0.802974 \n"
"32768 1:0.229826 2:0.668731 3:0.190083 4:0.331324 \n"
"32768 1:0.042293 2:0.062975 3:-0 4:0.753386 \n"
"32768 1:0.268194 2:0.048911 3:0.469602 4:0.735489 \n"
"32768 1:0.14592 2:0.092313 3:0 4:0.653325 \n"
"32768 1:0.204157 2:0.145631 3:0.533191 4:0.250183 \n"
"32768 1:0.051404 2:0.374686 3:0.671983 4:0.095884 \n"
"8736.9023777046 1:0 2:0 3:0.671018 4:0.511873 \n"
"32768 1:0.108407 2:0.063427 3:-0 4:0.275108 \n"
"27738.30140785341 1:0.13342 2:0.429151 3:0.07384 4:0.587927 \n"
"16121.61871719478 1:0.115551 2:0.814115 3:0.27288 4:0.973399 \n"
"32768 1:0 2:0.242216 3:0.614706 4:0.253639 \n"
"-32768 1:0.295563 2:0.366849 3:0 4:0.543763 \n"
"-32768 1:0.113488 2:0.01421 3:0 4:0.494101 \n"
"-32768 1:0.202627 2:0.055041 3:0 4:0.8752 \n"
"-32768 1:0.008244 2:0.151786 3:0.770267 4:0.267578 \n"
"-32768 1:0.010218 2:0.089719 3:0.724008 4:0.11173 \n"
"-32768 1:0.077617 2:0.091124 3:0.190689 4:0.350042 \n"
"-32768 1:0.19069 2:0.168902 3:0.345286 4:0.726607 \n"
"-32768 1:0.071727 2:0.051051 3:0.354279 4:0.254197 \n"
"-32768 1:0.070757 2:0.328098 3:0.319588 4:0.812812 \n"
"-32768 1:0.113161 2:0.218098 3:0 4:0.795583 \n"
"-32768 1:0.302309 2:0.209975 3:0.330896 4:0.426638 \n"
"-32768 1:0.08587 2:0.017892 3:0.947097 4:0.045377 \n"
"-12179.50179350106 1:0.241476 2:0.046424 3:0.204678 4:0.41936 \n"
"-32768 1:0.161316 2:0.307232 3:0.417924 4:0.294437 \n"
"-19311.55147798051 1:0.632807 2:0.461692 3:0 4:0.499592 \n"
"-32768 1:0.073716 2:0.078398 3:0.201152 4:0.755829 \n"
"-32768 1:0.00312 2:0.126409 3:0.874653 4:0.190362 \n"
"-32768 1:0.303215 2:0.167984 3:0 4:0.850097 \n"
"-32768 1:0.265432 2:0.192853 3:0.240642 4:0.371425 \n"
"-32768 1:0.140032 2:0.372321 3:0 4:0.55355 \n"
"-32768 1:0.100542 2:0.369898 3:0 4:0.644936 \n"
"-32768 1:0 2:0.364103 3:0.166667 4:0.589966 \n"
"-32768 1:0.260391 2:0.140381 3:0.374286 4:0.427254 \n"
"-32768 1:0.134283 2:0.081723 3:0 4:0.424481 \n"
"-27949.81358865424 1:0 2:0.094247 3:0 4:0.202287 \n"
"-32768 1:0.050518 2:0.05117 3:0.574074 4:0.86121 \n"
"-32768 1:0 2:0.179205 3:0.612375 4:0.885508 \n"
"-32768 1:0.077271 2:0.017804 3:0.058215 4:0.825536 \n"
"-11139.5285583284 1:0.027927 2:0.049742 3:0.117396 4:0.267427 \n"
"-32768 1:0.004716 2:0.081042 3:0.205864 4:0.575099 \n"
"-32768 1:0.041088 2:0.084414 3:0 4:0.284399 \n"
"-32768 1:0.054403 2:0.150697 3:0.734694 4:0.238885 \n"
"-32768 1:0.041381 2:0.365225 3:0.714162 4:0.227975 \n"
"-32768 1:0.153545 2:0.403193 3:0.246575 4:0.377718 \n"
"-32768 1:0.153231 2:0.425797 3:0.250569 4:0.18669 \n"
"-32768 1:0 2:0.7773 3:0.234899 4:0.275941 \n"
"-32768 1:0 2:0.092119 3:0.40795 4:0.195595 \n"
"-32768 1:0.11853 2:0.115003 3:0.587398 4:0.135237 \n"
"-15755.17699954091 1:0.271418 2:0.093639 3:0.030471 4:0.531518 \n"
"-32768 1:0.03793 2:0.056485 3:0.715477 4:0.379447 \n"
"-32768 1:0.160405 2:0.135164 3:0.19661 4:0.526534 \n"
"-32768 1:0.102471 2:0.039327 3:0 4:0.4523 \n"
"-32768 1:0.052215 2:0.059235 3:0.246469 4:0.869021 \n"
"-32768 1:0.083254 2:0.046818 3:0.244138 4:0.365475 \n"
"-32768 1:0.236306 2:0.352019 3:0 4:0.527541 \n"
"-32768 1:0.030931 2:0.282856 3:0.622931 4:0.364695 \n"
"-32768 1:0.064113 2:0.357307 3:0.698788 4:0.533088 \n"
"-22609.61342415689 1:0.014214 2:0.048852 3:0.691256 4:0.12929 \n"
"-32768 1:0.177575 2:0.076454 3:0.389307 4:0.497702 \n"
"-32768 1:0.052743 2:0.072927 3:0.488733 4:0.292418 \n"
"-32768 1:0.058076 2:0.102246 3:0.629067 4:0.29344 \n"
"-32768 1:0.097885 2:0.077054 3:0.41 4:0.340632 \n";
	// Create file pointer
	FILE* fp = fmemopen(model_str, strlen(model_str), "rb");
	// Load model
	svm = svm_load_model_fp(fp);
	// Close file pointer
	fclose(fp);
	// Check success
	if(svm == NULL)
	{
		throw MyException("Error loading the SVM model file");
	}
}
	
// Classify vector
double SVMUtils::classify(const std::vector<float>& input, std::vector<bool> select, bool probability) const
{
	// Check select vector
	if(select.size() != input.size())
	{
		Log::w() << "Invalid feature select vector, using all." << endl;
		select.clear();
	}
	if(select.size() == 0)
	{
		// Fill with 1's
		for(unsigned int i=0; i<input.size(); i++)
		{
			select.push_back(true);
		}
	}
	// Count selected features
	int n = 0;
	for(unsigned int i=0; i<select.size(); i++)
	{
		if(select[i])
			n++;
	}
	// Allocate svm_node vector
	struct svm_node* nodes = new struct svm_node[n+1];
	// Add data
	int curr_elem = 0;
	for(unsigned int i=0; i<select.size(); i++)
	{
		if(select[i])
		{
			//cout << i+1 << ": " << input[i] << endl;
			// Set data
			nodes[curr_elem].index = i+1;
			nodes[curr_elem].value = input[i];
			// Increase current element pointer
			++curr_elem;
		}
	}
	// Add closing element
	nodes[curr_elem].index = -1;
	nodes[curr_elem].value = -1;
	// Classify
	double c = 0;
	if(probability)
	{
		double prob[2] = {0, 0};
		svm_predict_probability(svm, nodes, prob);
		c = prob[0];
	}
	else
	{
		c = svm_predict(svm, nodes);
	}
	// Free memory
	delete [] nodes;
	// Return probability of +1 class
	return c < 0 ? 0 : c;
}
